<?php if (!defined ('ABSPATH')) die('No direct access allowed');/** * WP BackItUp  - Zip Class * * @package WP BackItUp * @author  Chris Simmons <chris.simmons@wpbackitup.com> * @link    http://www.wpbackitup.com * */class WPBackItUp_Zip {	private $logger;    private $zip_file_count;	private $zip_actual_size;	private $max_zip_size;	private $zip;	private $zip_file_path;	function __construct($logger,$zip_file_path) {		try {			$this->logger = $logger;            $this->zip_file_count=0;			$this->zip_file_path=$zip_file_path;			$this->zip_actual_size = 0;			if ( file_exists($this->zip_file_path) ){				clearstatcache();				$this->zip_actual_size = filesize($this->zip_file_path);			}			$this->max_zip_size =WPBACKITUP__ZIP_MAX_FILE_SIZE;			if (!self::zip_utility_exists()){				throw new Exception('Zip Archive Class is not available.');			}			//Open or create the zip file			$this->zip = new ZipArchive;			if($this->zip->open($this->zip_file_path, ZipArchive::CREATE) !== TRUE){				throw new Exception('Unable to open/create zip file.');			}else{				$this->logger->log_info(__METHOD__,'Zip file opened/created:'.$this->zip_file_path);			}		} catch(Exception $e) {			$this->logger->log_error(__METHOD__,'Exception Occurred:'.$e);			throw $e;		}   }//   function __destruct() {////	}	public function close() {		$this->logger->log_info(__METHOD__,'Close Zip File.');		try {			$this->zip->close();		}		catch(Exception $e) {			$this->logger->log_error(__METHOD__,' Exception Occurred:'.$e);			//swallow this error		}	}	/**	 * Check if zip archive util exists	 * @return bool	 */	static public function zip_utility_exists (){		return class_exists('ZipArchive');	}//	public function compress_folder($source_path,$target_root_folder) {//		$this->logger->log_info(__METHOD__,'Compress the backup folder FROM:'.$source_path);////		//Create ROOT folder WP Content//		$rtnVal =false;//		//$target_root_folder = $target_root_folder .'/' .basename($source_path);//		$this->logger->log_info(__METHOD__,'Create Root Folder:'.$target_root_folder);////		if ($this->zip->addEmptyDir($target_root_folder)){//			$this->logger->log_info(__METHOD__,'Folder Created:'.$target_root_folder);////			$rtnVal = $this->zip_folder($source_path,$target_root_folder);////		} else {//			$this->logger->log_error(__METHOD__,'Folder NOT Created:'.$target_root_folder);//		}////		$this->logger->log('(Zip.compress) Backup folder compressed successfully.');//		return $rtnVal;//	}	//this method does NOT work on folders in the root for some reason.	public function folder_exists($target_root_folder){		$this->logger->log_info( __METHOD__, ' Folder Exists:' . $target_root_folder );		if ('/' != substr($target_root_folder, -1)){			$target_root_folder.= '/';		}		//Does the folder already exist in the zip folder?		$this->logger->log_info(__METHOD__,'Does folder exist in zip file:'.$target_root_folder);		$folder_info = $this->zip->statName($target_root_folder);		if ($folder_info===false){			$this->logger->log_info( __METHOD__, ' Folder does NOT exist!!' );			return false;		} else{			//Folder exists			$this->logger->log_info( __METHOD__, 'Folder Info ' );			$this->logger->log($folder_info);			return true;		}	}	public function zip_file($source_path,$target_root_folder) {		$this->logger->log_info(__METHOD__,'Add file to zip:' .$source_path);		$target_path = $target_root_folder . '/' .basename($source_path);		$this->logger->log_info(__METHOD__,'Target FILE Path:' .$target_path);		if (!is_file($source_path)){			$this->logger->log_error(__METHOD__,'File doesnt exist:' .$source_path);			return false;		}		if (!$this->zip->addFile($source_path,$target_path)){			$this->logger->log_error(__METHOD__,'Cannot add file to zip' .$source_path);			return false;		}		$this->logger->log_info(__METHOD__,'File added successfully to zip' .$source_path);		return true;	}	public function validate_file($target_file) {		return $this->zip->statName($target_file);	}	//use this to validate each of the root folders	public function validate_folder($source_path,$target_root_folder) {		//$this->logger->log_info(__METHOD__,'Validate backup folder.' .$source_path);		$rtn_value=true;		//open the current folder		$iterator = new DirectoryIterator ( $source_path );		foreach ( $iterator as $file ) {			if (!$file->isDot ()) {				//$this->logger->log_info(__METHOD__,'File:' .$file->getFilename());				if ($file->isDir()) {					$target_path = $target_root_folder . '/' .$file->getFilename();					//$this->logger->log_info(__METHOD__,'Target DIR Path:' .$target_path);					//Validate Folder					if (false===$this->zip->statName($target_path.'/')){						$this->logger->log_error(__METHOD__,'DIFF Folder:' .$target_path);						$rtn_value= false;					};					//Validate the files in the folder					if (!$this->validate_folder($file->getRealPath(),$target_path)){						//Dont do anything here but dont stop						$rtn_value= false;					}				}				else {					$target_path = $target_root_folder . '/' .$file->getFilename();					//$this->logger->log_info(__METHOD__,'Target FILE Path:' .$target_path);					if (false===$this->zip->statName($target_path)){						$this->logger->log_error(__METHOD__,'DIFF File:' .$target_path);						$rtn_value= false;					};				}			}		}		//$this->logger->log_info(__METHOD__,'Backup folder compressed.' .$source_path);		return $rtn_value;	}	public function zip_files_in_folder($source_path,$target_path,$filter=null) {		$this->logger->log_info(__METHOD__,'Zip files in folder:' .$source_path);		$this->logger->log_info(__METHOD__,'Filter:' .$filter);		//Create the root folder		if (!$this->zip->addEmptyDir($target_path)){			$this->logger->log_error(__METHOD__,'Cannot add empty directory' .$target_path);			return false;		}		if (null==$filter || empty($filter)) $filter='*';		$path = trailingslashit($source_path) .$filter;		$files = array_filter(glob($path), 'is_file');		foreach ($files as $file){			$this->logger->log_info(__METHOD__,'Add file:' . $file);			if (!$this->zip_file($file,$target_path)){				$this->logger->log_error(__METHOD__,'File NOT added successfully.');				return false;			}		}		$this->logger->log_info(__METHOD__,'All files in folder added.' .$source_path);		return true;	}	public function add_empty_folder($path){		$this->logger->log_info(__METHOD__,'Add Empty Folder.' .$path);		return $this->zip->addEmptyDir($path);	}	public function add_file($source_path,$target_path){		$this->logger->log_info(__METHOD__,'Source:' .$source_path);		$this->logger->log_info(__METHOD__,'Target:' .$target_path);		if ( file_exists($source_path) && $this->zip->addFile($source_path,$target_path) ){			$this->logger->log_info( __METHOD__, 'File Size:' . filesize ($source_path) .' bytes' );			$this->zip_file_count++;			return true;		}		return false;	}	//Getters//	public function get_zip_estimated_size(){//		return $this->zip_estimated_size;//	}	//dont call this too often and prob not accurate until zip is closed	//use estimated for most comparisons	public function get_zip_actual_size(){		clearstatcache();		$this->zip_actual_size=filesize($this->zip_file_path);		return $this->zip_actual_size;	}	public function get_max_zip_size($threshold=1){		return $this->max_zip_size*$threshold;	}	public function get_zip_file_count(){		return $this->zip_file_count;	}}